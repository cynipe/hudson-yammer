package hudson.plugins.yammer;

import hudson.Launcher;
import hudson.model.AbstractBuild;
import hudson.model.Build;
import hudson.model.BuildListener;
import hudson.model.Descriptor;
import hudson.tasks.Publisher;

import java.io.IOException;
import java.util.Map;

import net.sf.json.JSONObject;

import org.apache.http.client.ClientProtocolException;
import org.apache.log4j.Logger;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.StaplerRequest;

/**
 * <p>
 * When the user configures the project and enables this publisher,
 * {@link DescriptorImpl#newInstance(StaplerRequest)} is invoked and a new
 * {@link YammerPublisher} is created. The created instance is persisted to the
 * project configuration XML by using XStream, so this allows you to use
 * instance fields (like {@link #name}) to remember the configuration.
 * 
 * <p>
 * When a build is performed, the
 * {@link #perform(Build, Launcher, BuildListener)} method will be invoked.
 * 
 * @author Russell Hart
 */
public class YammerPublisher extends Publisher {
	protected static final Logger LOGGER = Logger
			.getLogger(YammerPublisher.class.getName());

	public static final DescriptorImpl DESCRIPTOR = new DescriptorImpl();

	/**
	 * The name of the Yammer group to post the build result too.
	 */
	private String yammerGroup;
	
	/**
	 * The id of the Yammer group to post the build result too.
	 */
	private String yammerGroupId;

	/**
	 * Get's called on saving the project specific config.
	 * @param yammerGroup
	 */
	@SuppressWarnings("deprecation")
	@DataBoundConstructor
	public YammerPublisher(String yammerGroup) {
		this.yammerGroup = yammerGroup;
		try {
			this.yammerGroupId = YammerUtils.getGroupId(DESCRIPTOR.accessAuthToken, DESCRIPTOR.accessAuthSecret, this.yammerGroup);
		} catch (Exception e) {
			LOGGER.error(e.getLocalizedMessage());
			//throw new RuntimeException(e);
		} 
	}

	public String getYammerGroup() {
		return this.yammerGroup;
	}

	public Descriptor<Publisher> getDescriptor() {
		return DESCRIPTOR;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * hudson.tasks.BuildStepCompatibilityLayer#perform(hudson.model.AbstractBuild
	 * , hudson.Launcher, hudson.model.BuildListener)
	 */
	public boolean perform(AbstractBuild<?, ?> build, Launcher launcher,
			BuildListener listener) throws IOException {

		// Publish the build results to Yammer
		YammerUtils.sendMessage(DESCRIPTOR.accessAuthToken,
				DESCRIPTOR.accessAuthSecret,
				createBuildMessageFromResults(build), this.yammerGroupId);

		return true;
	}

	/**
	 * Create a message from the build results.
	 * 
	 * @param build
	 * @return
	 */
	private String createBuildMessageFromResults(AbstractBuild<?, ?> build) {
		String absoluteBuildURL = DESCRIPTOR.hudsonUrl + build.getUrl();
		String tinyUrl = "";
        try {
            tinyUrl = YammerUtils.createTinyUrl(absoluteBuildURL);
        } catch (Exception e) {
            tinyUrl = "?";
        }

		StringBuffer messageBuilder = new StringBuffer();
		messageBuilder.append("Hudson Build Results - ");
		messageBuilder.append(build.getFullDisplayName());
		messageBuilder.append(" ");
		messageBuilder.append(build.getResult().toString());
		messageBuilder.append(" ");
		messageBuilder.append(tinyUrl);

		return messageBuilder.toString();
	}

	public static final class DescriptorImpl extends Descriptor<Publisher> {

		/**
		 * The Yammer request auth token used in getting the access token and
		 * access authentication. See http://www.yammer.com/api_oauth.html
		 */
		private String requestAuthToken;

		/**
		 * The Yammer request auth secret used in getting the access
		 * authentication. See http://www.yammer.com/api_oauth.html
		 */
		private String requestAuthSecret;

		/**
		 * The Yammer access token used in getting the access authentication.
		 * See http://www.yammer.com/api_oauth.html
		 */
		private String accessToken;

		/**
		 * The Yammer access auth token, needed for using the Yammer API
		 */
		private String accessAuthToken = "";

		/**
		 * The Yammer access auth secret, needed for using the Yammer API
		 */
		private String accessAuthSecret = "";

		/**
		 * The HTTP address of the Hudson installation, such as
		 * http://yourhost.yourdomain/hudson/. This value is used to put links
		 * into messages generated by Hudson.
		 */
		private String hudsonUrl;

		public DescriptorImpl() {
			super(YammerPublisher.class);
			// Load the saved configuration
			load();
		}

		/**
		 * Gets new oauth request auth parameters from Yammer for this plugin.
		 * 
		 * @throws IOException
		 * @throws ClientProtocolException
		 */
		private void initialseRequestAuthParameters()
				throws ClientProtocolException, IOException {
			Map<String, String> parametersMap;

			parametersMap = YammerUtils.getRequestTokenParameters();
			this.requestAuthToken = parametersMap.get(YammerUtils.OAUTH_TOKEN);
			this.requestAuthSecret = parametersMap
					.get(YammerUtils.OAUTH_SECRET);
		}

		public String getDisplayName() {
			return "Publish results in Yammer";
		}

		public String accessAuthToken() {
			return accessAuthToken;
		}

		public String accessAuthSecret() {
			return accessAuthSecret;
		}

		/**
		 * Get's new request auth parameters every time to enure they are valid
		 * i.e. not expired.
		 * 
		 * @return
		 */
		public String requestAuthToken() {
			try {
				initialseRequestAuthParameters();
			} catch (Exception e) {
				this.requestAuthSecret = "";
				this.requestAuthToken = "";

				LOGGER.error(e.getLocalizedMessage());
				e.printStackTrace();
			}

			return requestAuthToken;
		}

		public String requestAuthSecret() {
			return requestAuthSecret;
		}

		public String accessToken() {
			return accessToken;
		}

		public String hudsonUrl() {
			return hudsonUrl;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see
		 * hudson.model.Descriptor#configure(org.kohsuke.stapler.StaplerRequest,
		 * net.sf.json.JSONObject)
		 */
		@Override
		public boolean configure(StaplerRequest req, JSONObject o)
				throws FormException {
			// to persist global configuration information, set that to
			// properties and call save().
			String newAccessToken = o.getString("accessToken");
			this.hudsonUrl = o.getString("hudsonUrl");

			// If accessToken isnt blank and different to current saved one then
			// get the authAccess params
			if (!newAccessToken.equals("")
					&& !newAccessToken.equals(this.accessToken)) {

				this.accessToken = newAccessToken;
				setAccessAuthParameters();
			}

			save();
			return super.configure(req, o);
		}

		/**
		 * Get the access auth parameters from Yammer. See
		 * http://www.yammer.com/api_oauth.html
		 * 
		 * @throws FormException
		 */
		private void setAccessAuthParameters() throws FormException {

			Map<String, String> parametersMap;
			try {
				parametersMap = YammerUtils.getAccessTokenParameters(
						this.requestAuthToken, this.requestAuthSecret,
						this.accessToken);
				this.accessAuthToken = parametersMap
						.get(YammerUtils.OAUTH_TOKEN);
				this.accessAuthSecret = parametersMap
						.get(YammerUtils.OAUTH_SECRET);
			} catch (Exception e) {
				throw new FormException(e.getCause(), "accessToken");
			}
		}
	}

}